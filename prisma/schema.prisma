generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean       @default(false)
  image         String?
  projectCount  Int           @default(0)
  github        String?
  twitter       String?
  hasDetails    Boolean       @default(false)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  projects      Project[]
  applications  Application[]

  @@unique([email])
  @@map("user")
}

model Application {
  id        String            @id
  title     String
  body      String
  userId    String
  accepted  Boolean           @default(false)
  status    ApplicationStatus @default(pending)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  updatedAt DateTime
  createdAt DateTime

  @@unique([id, projectId])
  @@map("application")
}

enum ApplicationStatus {
  pending
  accepted
  rejected
}

model Project {
  id                 String        @id
  projectName        String
  projectDescription String
  github             String?
  progress           Int
  votes              Int           @default(0)
  applications       Application[]
  userId             String
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now())

  @@unique([id, userId])
  @@map("project")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
